image: host.docker.internal:5000/bigsaltyfishes/windows-2022-runner:dotnet8.0

stages:
  - build
  - publish

variables:
  PROJECT_DIR: ServerProxy
  RELEASE_DIR: ServerProxy/publish
  ARTIFACTS_DIR: ServerProxy/publish
  GIT_SSL_NO_VERIFY: "true"

build-server-linux-x64:
  image: mcr.microsoft.com/dotnet/sdk:8.0
  stage: build
  before_script:
    - git fetch --unshallow --all
  script:
    - sed -i 's/deb.debian.org/mirrors.ustc.edu.cn/g' /etc/apt/sources.list.d/debian.sources
    - apt update
    - apt install -y build-essential zlib1g-dev
    - cd Server
    - dotnet publish -r linux-x64 -c Release -o ./publish
  artifacts:
    paths:
      - Server/publish

build-linux-x64:
  image: mcr.microsoft.com/dotnet/sdk:8.0
  stage: build
  before_script:
    - git fetch --unshallow --all
  script:
    - cd ServerProxy
    - dotnet publish -r linux-x64 -c Release -o ./linux-x64
    - rm ./linux-x64/*.pdb
    - rm ./linux-x64/*.json
    - rm ./linux-x64/*.xml
    - echo $CI_JOB_ID > JOBIDLINUX64
  artifacts:
    paths:
      - ServerProxy/linux-x64
      - ServerProxy/JOBIDLINUX64

build-win-x64:
  stage: build
  tags:
    - shared
    - windows2022
  before_script:
    - git fetch --unshallow --all
  script:
    - msbuild .\ServerProxy.sln -target:ToastNotification /p:Configuration=Release /p:Platform=x64
    - cd Updater
    - dotnet publish -r win-x64 -c Release -o .\x64
    - cd ..\$PROJECT_DIR
    - dotnet publish -r win-x64 -c Release -o .\x64
    - cp -r ..\Updater\x64\* .\x64\
    - rm .\x64\*.pdb
    - rm .\x64\*.json
    - rm .\x64\*.xml
    - Add-Content -Path "JOBID64" -Value "$CI_JOB_ID"
  artifacts:
    paths:
      - $PROJECT_DIR/x64
      - $PROJECT_DIR/JOBID64

build-win-arm64:
  stage: build
  tags:
    - shared
    - windows2022
  before_script:
    - git fetch --unshallow --all
  script:
    - msbuild .\ServerProxy.sln -target:ToastNotification /p:Configuration=Release /p:Platform=ARM64
    - cd Updater
    - dotnet publish -r win-arm64 -c Release -o .\arm64
    - cd ..\$PROJECT_DIR
    - dotnet publish -r win-arm64 -c Release -o .\arm64
    - cp -r ..\Updater\arm64\* .\arm64\
    - rm .\arm64\*.pdb
    - rm .\arm64\*.json
    - rm .\arm64\*.xml
    - Add-Content -Path "JOBIDAA64" -Value "$CI_JOB_ID"
  artifacts:
    paths:
      - $PROJECT_DIR/arm64
      - $PROJECT_DIR/JOBIDAA64

publish:
    image: alpine:latest
    stage: publish
    dependencies:
      - build-win-x64
      - build-win-arm64
    only:
      - tags
    script:
      - sed -i 's/dl-cdn.alpinelinux.org/cernet.mirrors.ustc.edu.cn/g' /etc/apk/repositories
      - apk update && apk add curl ca-certificates
      - cp /etc/gitlab-runner/certs/ca.crt /usr/local/share/ca-certificates/ca.crt
      - update-ca-certificates --fresh
      - curl --location --output /usr/local/bin/release-cli "https://gitlab.com/api/v4/projects/gitlab-org%2Frelease-cli/packages/generic/release-cli/latest/release-cli-linux-amd64"
      - chmod +x /usr/local/bin/release-cli
      - release-cli create --name "Release $CI_COMMIT_SHA" --tag-name $CI_COMMIT_TAG  --assets-link "[{\"name\":\"Win64\",\"url\":\"https://git.labserver.internal/ShadiaoLeYuan/ServerProxy/-/jobs/$(cat $PROJECT_DIR/JOBID64|sed "s/\r//g")/artifacts/download\",\"link_type\":\"package\"}, {\"name\":\"ARM64\",\"url\":\"https://git.labserver.internal/ShadiaoLeYuan/ServerProxy/-/jobs/$(cat $PROJECT_DIR/JOBIDAA64|sed "s/\r//g")/artifacts/download\",\"link_type\":\"package\"}]"
